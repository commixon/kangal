syntax = "proto3";
package grpc.proxy.v2;

import "google/protobuf/duration.proto";
import "google/api/annotations.proto";

option go_package = "grpc/proxy/v2";

enum LoadTestType {
    LOAD_TEST_TYPE_UNSPECIFIED = 0;
    LOAD_TEST_TYPE_JMETER = 1;
    LOAD_TEST_TYPE_FAKE = 2;
    LOAD_TEST_TYPE_LOCUST = 3;
}

enum LoadTestPhase {
    LOAD_TEST_PHASE_UNSPECIFIED = 0;
    LOAD_TEST_PHASE_CREATING = 1;
    LOAD_TEST_PHASE_STARTING = 2;
    LOAD_TEST_PHASE_RUNNING = 3;
    LOAD_TEST_PHASE_FINISHED = 4;
    LOAD_TEST_PHASE_ERRORED = 5;
}

message LoadTestStatus {
    // Name is the load test name that always matches k8s namespace where it runs
    string name = 1;
    int32 distributed_pods = 2;
    LoadTestPhase phase = 3;
    map<string, string> tags = 4;
    bool has_env_vars = 5;
    bool has_test_data = 6;
    LoadTestType type = 7;
}

message GetRequest {
    string name = 1;
}

message GetResponse {
    LoadTestStatus load_test_status = 1;
}

message CreateRequest {
    bytes env_vars = 1;
    bytes test_data = 2;
    bytes test_file = 3;

    int32 distributed_pods = 4;
    LoadTestType type = 5;
    bool overwrite = 6;
    string target_url = 7;
    // Tags allows to tag tests for further filtering.
    // When used via gRPC REST gateway this field works as simple "type": "string" and
    // MUST be in the "tag1:value1,tag2:value2,..." format.
    map<string, string> tags = 8;
    // Duration allows to <WHAT?>.
    // When used via gRPC REST gateway this value must be compatible with https://golang.org/pkg/time/#ParseDuration
    google.protobuf.Duration duration = 9;
}

message CreateResponse {
    LoadTestStatus load_test_status = 1;
}

message ListRequest {
    map<string, string> tags = 1;
    int64 limit = 2;
    string continue = 3;
}

message ListResponse {
    int64 limit = 1;
    string continue = 2;
    int64 remain = 3;
    repeated LoadTestStatus load_test_statuses = 4;
}

service LoadTestService {
    // Get returns load test by given name
    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v2/load-test/{name}"
        };
    }
    // Create creates new load test. This method MUST use "Content-Type: multipart/form-data" when is used
    // via gRPC REST gateway as this is the only possible way to upload files. In this case "tags" field
    // MUST be in the "tag1:value1,tag2:value2,..." format.
    rpc Create (CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v2/load-test"
            body: "*"
        };
    }
    // List searches and returns load tests by given filters
    rpc List (ListRequest) returns (ListResponse) {
        option (google.api.http) = {
            get: "/v2/load-test"
        };
    }
}
